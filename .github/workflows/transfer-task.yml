name: Move Project Task to Needs Review

on:
  pull_request:
    types:
      - opened
      - edited

jobs:
  move-task:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v3
          
          # Step 2: Debug GH_TOKEN
          - name: Debug GH_TOKEN
            env:
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: echo "GH_TOKEN is set and available."

      # Step 3: Verify GitHub CLI Authentication
      - name: Verify GitHub CLI Authentication
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth status

      # Step 4: Move project task to Needs Review
      - name: Move project task to Needs Review
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Step 4.1: Extract PR Number and Branch Name
          PR_NUMBER=$(jq -r .number < "${GITHUB_EVENT_PATH}")
          BRANCH_NAME=$(jq -r .pull_request.head.ref < "${GITHUB_EVENT_PATH}")
          echo "Pull Request Number: $PR_NUMBER"
          echo "Branch Name: $BRANCH_NAME"

          # Step 4.2: Extract Issue Number from Branch Name
          # Assuming the issue number is the first part of the branch name (e.g., feature/15-test-pr or 15-test-pr)
          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -oP '^\d+' | head -n 1)
          echo "Linked Issue Number: $ISSUE_NUMBER"

          if [ -z "$ISSUE_NUMBER" ]; then
            echo "No issue number found in branch name."
            exit 0
          fi

          # Step 4.3: Extract Repository Info
          REPO_FULL_NAME=${{ github.repository }}
          OWNER=${{ github.repository_owner }}
          REPO_NAME=$(basename "${REPO_FULL_NAME}")
          echo "Repository: $REPO_NAME"
          echo "Owner: $OWNER"

          # Step 4.4: Fetch Linked Project Task ID from the Issue
          PROJECT_ITEM_ID=$(gh api graphql -F issueNumber="$ISSUE_NUMBER" -F repo="$REPO_NAME" -F owner="$OWNER" -f query='
            query($issueNumber: Int!, $repo: String!, $owner: String!) {
              repository(name: $repo, owner: $owner) {
                issue(number: $issueNumber) {
                  projectItems(first: 1) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }
          ' --jq '.data.repository.issue.projectItems.nodes[0].id')

          if [ -z "$PROJECT_ITEM_ID" ]; then
            echo "No linked project task found for this issue."
            exit 0
          fi
          echo "Project Item ID: $PROJECT_ITEM_ID"

          # Step 4.5: Find "Needs Review" Column ID in Organization Projects
          COLUMN_ID=$(gh api graphql -F owner="$OWNER" -f query='
            query($owner: String!) {
              organization(login: $owner) {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                    fields(first: 20) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          ' --jq '.data.organization.projectsV2.nodes[].fields.nodes[] | select(.name == "Needs Review") | .id')

          if [ -z "$COLUMN_ID" ]; then
            echo "Could not find 'Needs Review' column."
            exit 1
          fi
          echo "Needs Review Column ID: $COLUMN_ID"

          # Step 4.6: Move the Project Task to Needs Review
          gh api graphql -F itemId="$PROJECT_ITEM_ID" -F columnId="$COLUMN_ID" -f query='
            mutation($itemId: ID!, $columnId: ID!) {
              updateProjectV2ItemFieldValue(input: {projectId: $columnId, itemId: $itemId, value: "Needs Review"}) {
                projectV2Item {
                  id
                }
              }
            }
          '
